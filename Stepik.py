#!/usr/bin/env python
# coding: utf-8

# In[161]:


fib = lambda x: 1 if x <= 2 else fib(x - 1) + fib(x - 2)
fib(7)


# In[15]:


n = int(input())
sum = 0

for i in range(0, n):
    x = int(input())
    sum += x
print(sum)


# In[82]:


# калькулятор
a = int(input())
b = int(input())
c = input()

if c == '+':
    print(a + b)
elif c == '-':
    print(a - b)
elif c == '/':
    if b != 0:
        print(a / b)
    else:
        print('Деление на 0!')
elif c == '*':
    print(a * b)
elif c == 'mod':
    if b != 0:
        print(a % b)
    else:
        print('Деление на 0!')
elif c == 'pow':
    print(a ** b)
elif c == 'div':
    if b != 0:
        print(a // b)
    else:
        print('Деление на 0!')


# In[153]:


# работа с окончаниями
n = int(input())

if n % 10 == 1 and n != 11 and n!= 111:
    print(n, 'программист')
elif (n % 10 == 2 or n % 10 == 3 or n % 10 == 4) and (n != 12 and n != 13 and n != 14 and n != 112 and n != 113 and n!= 114):
    print(n, 'программиста')
elif n % 10 == 0 or n == 11 or n == 12 or n == 13 or n == 14 or n == 112 or n == 113 or n == 114:
    print(n, 'программистов')
else:
    print(n, 'программистов')


# In[166]:


# сумма левой и правой части
n = input()
if int(n[0]) + int(n[1]) + int(n[2]) == int(n[3]) + int(n[4]) + int(n[5]):
    print('Счастливый')
else:
    print('Обычный')


# In[1]:


i = 0
stars = str()
while i < 5:
    stars += ('*')
    if i % 2 == 0:
        stars += ('**')
    if i > 2:
        stars += ('***')
    i = i + 1
print(len(stars))


# In[11]:


# счет суммы пока не 0
n = int(input())
sum = n

while n != 0:
    n = int(input())
    sum += n
print(sum)


# In[8]:


# НОК чисел a, b
a = int(input())
b = int(input())
d = 1

while d % b != 0 or d % a != 0:
    d += 1
print(d)


# In[46]:


i = 0
while i <= 100:
    i = int(input())
    if i < 10:
        continue
    if i > 100:
        break
    print(i)


# In[ ]:


while True:
    number = int(input())
    if number >100:
        break
    if number <10:
        continue
    print(number)


# In[19]:


a = int(input())
b = int(input())
c = int(input())
d = int(input())

for j in range(c, d+1):
    print('\t', j, end = '')

for i in range(a, b+1):
    print('\n', i, end = '\t')
    for j in range(c, d+1):
        print(i * j, end = '\t')


# In[21]:


a, b = (int(i) for i in input().split())
s = 0
if a % 2 == 0:
    a += 1
for i in range(a, b + 1, 2):
    s += i
print(s)


# In[22]:


a, b = (int(i) for i in input().split())
sum = 0
n = 0
for i in range(a, b + 1):
    if i % 3 == 0:
        sum += i
        n += 1
print('average: ', sum / n)


# In[24]:


genom = input()
ratio = (genom.lower().count('g') + genom.lower().count('c')) / len(genom.lower())
print(ratio)


# Узнав, что ДНК не является случайной строкой, только что поступившие в Институт биоинформатики студенты группы информатиков предложили использовать алгоритм сжатия, который сжимает повторяющиеся символы в строке.
# 
# Кодирование осуществляется следующим образом:
# s = 'aaaabbсaa' преобразуется в 'a4b2с1a2', то есть группы одинаковых символов исходной строки заменяются на этот символ и количество его повторений в этой позиции строки.
# 
# Напишите программу, которая считывает строку, кодирует её предложенным алгоритмом и выводит закодированную последовательность на стандартный вывод. Кодирование должно учитывать регистр символов.
# 
# __Sample Input 1:__
# 
# aaaabbcaa
# 
# __Sample Output 1:__
# 
# a4b2c1a2

# In[ ]:


s = input()
l=len(s)
cnt=1
for i in range(l):
    if i==(l-1):
        print(s[i]+str(cnt),end='')
    else:
        if s[i]==s[i+1]:
            cnt=cnt+1
        else:
            print(s[i]+str(cnt),end='')
            cnt=1


# Напишите программу, на вход которой подаётся список чисел одной строкой. Программа должна для каждого элемента этого списка вывести сумму двух его соседей. Для элементов списка, являющихся крайними, одним из соседей считается элемент, находящий на противоположном конце этого списка. Например, если на вход подаётся список "1 3 5 6 10", то на выход ожидается список "13 6 9 15 7" (без кавычек).
# 
# Если на вход пришло только одно число, надо вывести его же.
# 
# Вывод должен содержать одну строку с числами нового списка, разделёнными пробелом.

# In[24]:


lst = [int(a) for a in input().split()]
lst_new = []
if len(lst) > 1:
    for i in range(len(lst) - 1):
        if i == 0:
            lst_new.append(lst[-1] + lst[i + 1])
        else:
            lst_new.append(lst[i - 1] + lst[i + 1])
    lst_new.append(lst[-2] + lst[0])
    for a in lst_new:
        print(a, end = ' ')
else:
    for a in lst:
        print(a)


# Напишите программу, которая принимает на вход список чисел в одной строке и выводит на экран в одну строку значения, которые встречаются в нём более одного раза.
# 
# Для решения задачи может пригодиться метод sort списка.
# 
# Выводимые числа не должны повторяться, порядок их вывода может быть произвольным.

# In[31]:


lst = [int(a) for a in input().split()]
lst.sort()
k = 2.5
for i in range(len(lst) - 1):
    if lst[i] == lst[i+1] and lst[i] != k:
        print(lst[i], end =' ')
        k = lst[i]
    else:
        continue


# Напишите программу, которая считывает с консоли числа (по одному в строке) до тех пор, пока сумма введённых чисел не будет равна 0 и сразу после этого выводит сумму квадратов всех считанных чисел.
# 
# Гарантируется, что в какой-то момент сумма введённых чисел окажется равной 0, после этого считывание продолжать не нужно.
# 
# В примере мы считываем числа 1, -3, 5, -6, -10, 13; в этот момент замечаем, что сумма этих чисел равна нулю и выводим сумму их квадратов, не обращая внимания на то, что остались ещё не прочитанные значения.

# In[4]:


summ = 0
lst = []
while True:
    u = int(input())
    summ += u
    lst.append(u ** 2)
    if summ == 0:
        break
print(sum(lst))


# Напишите программу, которая выводит часть последовательности 1 2 2 3 3 3 4 4 4 4 5 5 5 5 5 ... (число повторяется столько раз, чему равно). На вход программе передаётся неотрицательное целое число n — столько элементов последовательности должна отобразить программа. На выходе ожидается последовательность чисел, записанных через пробел в одну строку.
# 
# Например, если n = 7, то программа должна вывести 1 2 2 3 3 3 4.

# In[21]:


n = int(input())
lst = []
cnt = 0
for i in range(1, n + 1):
    lst += [i] * i
for j in lst:
    print(j, end = ' ')
    cnt += 1
    if cnt >= n:
        break


# In[26]:


lst = [int(i) for i in input().split()]
x = int(input())
cnt = 0
for j in range(len(lst)):
    if x == lst[j]:
        print(j, end = ' ')
        cnt += 1
if cnt == 0:
    print('Отсутствует')


# In[5]:


matrix = []
while True:
    matrix += [int(j) for j in input().split()]
    if 'end':
        break


# Функция удаляет нечетные элементы списка, а четные сокращает в 2 раза

# In[17]:


def modify_list(l):
    i = len(l) - 1
    while i != -1:
        if l[i] % 2:
            del l[i]
        else:
            l[i] = l[i] // 2
        i -= 1
    return l
print(modify_list([1, 2, 3, 4, 5, 6]))


# Напишите функцию update_dictionary(d, key, value), которая принимает на вход словарь _d_ и два числа: _key_ и _value_.
# 
# Если ключ _key_ есть в словаре _d_, то добавьте значение _value_ в список, который хранится по этому ключу.
# Если ключа _key_ нет в словаре, то нужно добавить значение в список по ключу _2*key_. Если и ключа _2 * key_ нет, то нужно добавить ключ _2 * key_ в словарь и сопоставить ему список из переданного элемента _[value]_.

# In[3]:


def update_dictionary(d, key, value):
    if key in d:
        d[key].append(value)
    elif key not in d and 2*key in d:
        d[2*key].append(value)
    else:
        d[2*key] = [value]
    return d
d = {}
print(update_dictionary(d, 1, -1))  # None
print(d)   


# Помогите Антону написать упрощённую версию такой программы, которая сможет подсчитать слова, разделённые пробелом и вывести получившуюся статистику.
# 
# Программа должна считывать одну строку со стандартного ввода и выводить для каждого уникального слова в этой строке число его повторений (без учёта регистра) в формате "слово количество" (см. пример вывода).

# In[35]:


stroka = [i for i in input().lower().split()]
cnt = {}
for i in stroka:
    if i in cnt:
        cnt[i] += 1
    else:
        cnt[i] = 1
for i in cnt.items():
    print(*i)


# Напишите программу, которая считывает строку с числом nn, которое задаёт количество чисел, которые нужно считать. Далее считывает n строк с числами x_i, по одному числу в каждой строке. Итого будет n+1 строк.
# 
# При считывании числа x_i программа должна на отдельной строке вывести значение f(x_i). Функция f(x) уже реализована и доступна для вызова. 
# 
# Функция вычисляется достаточно долго и зависит только от переданного аргумента x. Для того, чтобы уложиться в ограничение по времени, нужно избежать повторного вычисления значений.
# 
# __Sample Input:__
# 
# 5
# 5
# 12
# 9
# 20
# 12
# 
# __Sample Output:__
# 
# 11
# 41
# 47
# 61
# 41

# In[12]:


def f(x):
    return x ** 2

d = {}
k = []
n = int(input())
for i in range(n):
    x = int(input())
    k.append(x)
for j in range(0, len(k)):
    key = k[j]
    if  key in d:
        print(d[key])
    elif key not in d:
        p = k[j]
        d[key] = f(p)
        print(d.get(key))


# На прошлой неделе мы сжимали строки, используя кодирование повторов. Теперь нашей задачей будет восстановление исходной строки обратно.
# 
# Напишите программу, которая считывает из файла строку, соответствующую тексту, сжатому с помощью кодирования повторов, и производит обратную операцию, получая исходный текст.
# 
# Запишите полученный текст в файл и прикрепите его, как ответ на это задание.
# 
# В исходном тексте не встречаются цифры, так что код однозначно интерпретируем.
# 
# Примечание. Это первое задание типа Dataset Quiz. В таких заданиях после нажатия "Start Quiz" у вас появляется ссылка "download your dataset". Используйте эту ссылку для того, чтобы загрузить файл со входными данными к себе на компьютер. Запустите вашу программу, используя этот файл в качестве входных данных. Выходной файл, который при этом у вас получится, надо отправить в качестве ответа на эту задачу.
# 
# __Sample Input:__
# 
# a3b4c2e10b1
# 
# __Sample Output:__
# 
# aaabbbbcceeeeeeeeeeb

# In[7]:


with open('./Downloads/dataset_3363_2 (4).txt', 'r') as inf:
    s1 = inf.readline()
    import re
    g = re.findall(r'\d+', s1)
    f = [i for i in s1 if i.isalpha()]
    h = "".join([int(i)*j for i, j in zip(g, f)])
    with open('./Downloads/dataset.txt', 'w') as inf:
        inf.write(h)


# Недавно мы считали для каждого слова количество его вхождений в строку. Но на все слова может быть не так интересно смотреть, как, например, на наиболее часто используемые.
# 
# Напишите программу, которая считывает текст из файла (в файле может быть больше одной строки) и выводит самое частое слово в этом тексте и через пробел то, сколько раз оно встретилось. Если таких слов несколько, вывести лексикографически первое (можно использовать оператор < для строк).
# 
# В качестве ответа укажите вывод программы, а не саму программу.
# 
# Слова, написанные в разных регистрах, считаются одинаковыми.
# 
# __Sample Input:__
# 
# abc a bCd bC AbC BC BCD bcd ABC
# 
# __Sample Output:__
# 
# abc 3

# In[4]:


with open('./Downloads/dataset_3363_3 (5).txt') as inf:
    s1 = inf.readline().strip().lower()
    cnt = {}
    h = ''
    for i in s1.split(' '):
        if i in cnt:
            cnt[i] += 1
        else:
            cnt[i] = 1
    for let, val in cnt.items():  # for name, age in dictionary.iteritems():  (for Python 2.x)
        if val == max(cnt.values()):
            h += str(let) + ' ' + str(val) + '\n'
    with open('./Downloads/dataset.txt', 'w') as inf:
        inf.write(h)


# Имеется файл с данными по успеваемости абитуриентов. Он представляет из себя набор строк, где в каждой строке записана следующая информация:
# 
# Фамилия;Оценка_по_математике;Оценка_по_физике;Оценка_по_русскому_языку
# 
# Поля внутри строки разделены точкой с запятой, оценки — целые числа.
# 
# Напишите программу, которая считывает исходный файл с подобной структурой и для каждого абитуриента записывает его среднюю оценку по трём предметам на отдельной строке, соответствующей этому абитуриенту, в файл с ответом.
# 
# Также вычислите средние баллы по математике, физике и русскому языку по всем абитуриентам и добавьте полученные значения, разделённые пробелом, последней строкой в файл с ответом.
# 
# В качестве ответа на задание прикрепите полученный файл со средними оценками по каждому ученику и одной строкой со средними оценками по трём предметам.
# 
# Примечание. Для разбиения строки на части по символу ';' можно использовать метод split следующим образом:
# 
# print('First;Second-1 Second-2;Third'.split(';'))
# ['First', 'Second-1 Second-2', 'Third']
# 
# __Sample Input:__
# 
# Петров;85;92;78
# 
# Сидоров;100;88;94
# 
# Иванов;58;72;85
# 
# __Sample Output:__
# 
# 85.0
# 
# 94.0
# 
# 71.666666667
# 
# 81.0 84.0 85.666666667

# In[7]:


with open('./Downloads/dataset_3363_4 (3).txt') as inf:
    lst = []
    for i in inf:
        i = i.strip().split(';')
        lst.append(i)
    math, phys, rus = 0, 0, 0
    for i in range(len(lst)):
        math += int(lst[i][1])
        phys += int(lst[i][2])
        rus += int(lst[i][3])
    math /= len(lst)
    phys /= len(lst)
    rus /= len(lst)
    math, phys, rus = (round(i, 9) for i in (math, phys, rus))
    a = f'{math} {phys} {rus}'
    with open('./Downloads/dataset2.txt', 'w') as inf:
        for name, math, phys, rus in lst:
            print(str(round((int(math) + int(phys) + int(rus)) / 3, 9)), file = inf)
        print(a, file = inf)


# Скачайте файл. В нём указан адрес другого файла, который нужно скачать с использованием модуля requests и посчитать число строк в нём.

# In[2]:


import requests
stroka = requests.get(url = 'https://stepic.org/media/attachments/course67/3.6.2/662.txt')

cnt = 0
for i in range(len(stroka.text.splitlines())):
    if stroka.text.splitlines()[i] != '':
        cnt += 1
print(cnt)


# Имеется набор файлов, каждый из которых, кроме последнего, содержит имя следующего файла.
# Первое слово в тексте последнего файла: "We".
# 
# Скачайте предложенный файл. В нём содержится ссылка на первый файл из этого набора.
# 
# Все файлы располагаются в каталоге по адресу:
# https://stepic.org/media/attachments/course67/3.6.3/
# 
# Загрузите содержимое ﻿последнего файла из набора, как ответ на это задание.

# In[8]:


import requests
stroka = requests.get(url = f'https://stepic.org/media/attachments/course67/3.6.3/699991.txt')
while stroka.text.find('We') == -1:
    n = stroka.text
    stroka = requests.get(url = f'https://stepic.org/media/attachments/course67/3.6.3/' + str(n))
print(stroka.text, end = '\n')


# Напишите программу, которая принимает на стандартный вход список игр футбольных команд с результатом матча и выводит на стандартный вывод сводную таблицу результатов всех матчей.
# 
# За победу команде начисляется 3 очка, за поражение — 0, за ничью — 1.
# 
# Формат ввода следующий:
# В первой строке указано целое число nn — количество завершенных игр.
# После этого идет nn строк, в которых записаны результаты игры в следующем формате:
# Первая_команда;Забито_первой_командой;Вторая_команда;Забито_второй_командой
# 
# Вывод программы необходимо оформить следующим образом:
# Команда:Всего_игр Побед Ничьих Поражений Всего_очков
# 
# Конкретный пример ввода-вывода приведён ниже.
# 
# Порядок вывода команд произвольный.
# 
# __Sample Input:__
# 
# 3
# 
# Спартак;9;Зенит;10
# 
# Локомотив;12;Зенит;3
# 
# Спартак;8;Локомотив;15
# 
# __Sample Output:__
# 
# Спартак:2 0 0 2 0
# 
# Зенит:2 1 0 1 3
# 
# Локомотив:2 2 0 0 6

# In[ ]:


res = {}
for _ in range(int(input())):
    n1, r1, n2, r2 = (int(i) if i.isdigit() else i for i in input().split(';'))
    res[n1] = list(map(sum, zip([1, r1 > r2, r1 == r2, r1 < r2], res.get(n1, [0, 0, 0, 0]))))
    res[n2] = list(map(sum, zip([1, r2 > r1, r2 == r1, r2 < r1], res.get(n2, [0, 0, 0, 0]))))
 
print('\n'.join(f'{k}: {" ".join(map(str, v))} {v[1] * 3 + v[2]}' for k, v in res.items()))


# Напишите программу, которая умеет шифровать и расшифровывать шифр подстановки. Программа принимает на вход две строки одинаковой длины, на первой строке записаны символы исходного алфавита, на второй строке — символы конечного алфавита, после чего идёт строка, которую нужно зашифровать переданным ключом, и ещё одна строка, которую нужно расшифровать.
# 
# Пусть, например, на вход программе передано:
# 
# abcd
# 
# *d%#
# 
# abacabadaba
# 
# #*%*d*%
# 
# Это значит, что символ a исходного сообщения заменяется на символ * в шифре, b заменяется на d, c — на % и d — на #.
# Нужно зашифровать строку `abacabadaba` и расшифровать строку `#*%*d*%` с помощью этого шифра. Получаем следующие строки, которые и передаём на вывод программы:
# 
# `*d*%*d*#*d*`
# 
# `dacabac`
# 
# __Sample Input 1:__
# 
# _abcd_
# 
# _*d%#_
# 
# _abacabadaba_
# 
# _#*%*d*%_
# 
# __Sample Output 1:__
# 
# *d*%*d*#*d*
# 
# _dacabac_

# In[10]:


stroka = str(input())
shifr = str(input())
code = str(input())
decode = str(input())

indic = dict(zip(stroka, shifr))
for i in code:
    print(indic[i], end = '')
indic_new = dict(zip(shifr,stroka))
for k in decode:
    print(indic_new[k], end = '')


# Простейшая система проверки орфографии может быть основана на использовании списка известных слов.
# Если введённое слово не найдено в этом списке, оно помечается как "ошибка".
# 
# Попробуем написать подобную систему.
# 
# На вход программе первой строкой передаётся количество _d_ известных нам слов, после чего на _d_ строках указываются эти слова. Затем передаётся количество _l_ строк текста для проверки, после чего _l_ строк текста.
# 
# Выведите уникальные "ошибки" в произвольном порядке. Работу производите без учёта регистра.

# In[ ]:


i, j = 0, 0
print_list = []
print_list_f = []
n_dic = int(input())
dic = []
while i < n_dic:
    dic.append(str(input()))
    i += 1
n_phras = int(input())
phrase = []
while j < n_phras:
    phrase.append(str(input()))
    j += 1
f = [i.lower() for i in dic]
for k in range(len(phrase)):
    for m in range(len(phrase[k].split(' '))):
        if phrase[k].lower().split(' ')[m] in f:
            continue
        else:
            if phrase[k].split(' ')[m].lower() not in print_list_f:
                print_list.append(phrase[k].split(' ')[m])
            print_list_f = [i.lower() for i in print_list]
for i in print_list:
    print(i)


# После дрессировки черепашка научилась понимать и запоминать указания биологов следующего вида:
# 
# север 10
# 
# запад 20
# 
# юг 30
# 
# восток 40
# 
# где первое слово — это направление, в котором должна двигаться черепашка, а число после слова — это положительное расстояние в сантиметрах, которое должна пройти черепашка.
# 
# Но команды даются быстро, а черепашка ползёт медленно, и программисты догадались, что можно написать программу, которая определит, куда в итоге биологи приведут черепашку. Для этого программисты просят вас написать программу, которая выведет точку, в которой окажется черепашка после всех команд. Для простоты они решили считать, что движение начинается в точке (0, 0), и движение на восток увеличивает первую координату, а на север — вторую.
# 
# Программе подаётся на вход число команд nn, которые нужно выполнить черепашке, после чего nn строк с самими командами. Вывести нужно два числа в одну строку: первую и вторую координату конечной точки черепашки. Все координаты целочисленные.

# In[105]:


d = {'север': 0, 'юг': 0, 'восток': 0, 'запад': 0}
for com, val in [input().split() for i in range(int(input()))]:
    d[com] += int(val)
print(d['восток'] - d['запад'], d['север'] - d['юг'], end = '')


# Дан файл с таблицей в формате [TSV](https://ru.wikipedia.org/wiki/TSV) с информацией о росте школьников разных классов.
# 
# Напишите программу, которая прочитает этот файл и подсчитает для каждого класса средний рост учащегося.
# 
# Файл состоит из набора строк, каждая из которых представляет собой три поля:
# Класс Фамилия Рост
# 
# Класс обозначается только числом. Буквенные модификаторы не используются. Номер класса может быть от 1 до 11 включительно. В фамилии нет пробелов, а в качестве роста используется натуральное число, но при подсчёте среднего требуется вычислить значение в виде вещественного числа.
# 
# Выводить информацию о среднем росте следует в порядке возрастания номера класса (для классов с первого по одиннадцатый). Если про какой-то класс нет информации, необходимо вывести напротив него прочерк.
# 
# В качестве ответа прикрепите файл с полученными данными о среднем росте.

# In[112]:


with open("./Downloads/dataset_3380_5 (1).txt", "r") as f:
    a = {str(i): [] for i in range(1, 12)}
    [a[i[0]].append(int(i[2])) for i in map(lambda x: x.split('\t'), f.read().split('\n')) if i[0]]
with open('./Downloads/dataset.txt', 'w') as inf:
    [print(i,sum(a[i])/len(a[i]) if len(a[i]) > 0 else '-', file = inf) for i in map(str, range(1, 12))]


# Напишите программу, на вход которой подаётся прямоугольная матрица в виде последовательности строк. После последней строки матрицы идёт строка, содержащая только строку "end" (без кавычек, см. Sample Input).
# 
# Программа должна вывести матрицу того же размера, у которой каждый элемент в позиции i, j равен сумме элементов первой матрицы на позициях (i-1, j), (i+1, j), (i, j-1), (i, j+1). У крайних символов соседний элемент находится с противоположной стороны матрицы.
# 
# В случае одной строки/столбца элемент сам себе является соседом по соответствующему направлению.
# 
# __Sample Input 1:__
# 
# 9 5 3
# 
# 0 7 -1
# 
# -5 2 9
# 
# end
# 
# __Sample Output 1:__
# 
# 3 21 22
# 
# 10 6 19
# 
# 20 16 -1

# In[ ]:


n = ''
m = []
while True:
    n = str(input()) # ввод строк
    if n == 'end':
        break
    m.append([int(s) for s in n.split()]) 
li, lj = len(m), len(m[0])
new = [[sum([m[i-1][j], m[(i+1)%li][j], m[i][j-1], m[i][(j+1)%lj]]) for j in range(lj)] for i in range(li)]

for i in range (li):
    for j in range (lj):
        print(new[i][j], end =' ')
    print()


# Выведите таблицу размером nхn, заполненную числами от 1 до $n^2$ по спирали, выходящей из левого верхнего угла и закрученной по часовой стрелке, как показано в примере (здесь n=5):
# 
# __Sample Input:__
# 
# 5
# 
# __Sample Output:__
# 
# 1 2 3 4 5
# 
# 16 17 18 19 6
# 
# 15 24 25 20 7
# 
# 14 23 22 21 8
# 
# 13 12 11 10 9

# In[114]:


n=int(input())
t=[[0]*n for i in range (n)]
i,j=0,0
for k in range(1, n*n+1):
  t[i][j]=k
  if k==n*n: break
  if i<=j+1 and i+j<n-1: j+=1
  elif i<j and i+j>=n-1: i+=1
  elif i>=j and i+j>n-1: j-=1
  elif i>j+1 and i+j<=n-1: i-=1
for i in range(n):
  print(*t[i])


# # IT RESUME

# Девочка Лиза любит учиться и ей подарили новый учебник по математике. Учебник состоит из задач, которые сгруппированы по разделам - «Производные», «Интегралы» и так далее. Лиза считает, что если номер задачи в разделе совпадает с номером страницы, то такая задача - «особенная».
# 
# Учебник имеет следующую стурктуру:
# 
# В книге n разделов. Нумерация идет от 1 до n.
# В i-ом разделе содержится arr[i] задач. Задачи занумерованы от 1 до arr[i].
# На каждой странице находится k задач. Только на последней странице каждого раздела задач может быть меньше, чем k.
# Каждый новый раздел начинается на новой странице. Соответственно, на одной странице никогда не будут задачи сразу с нескольких разделов.
# Нумерация страниц начинается с 1.
# Задание
# Напишите функцию CountSpecialProblems, которая будет возвращать число «особенных» задач в Лизином учебнике.
# 
# Функция CountSpecialProblems принимает на вход:
# 
# n - число разделов в книге
# k - число задач на странице
# arr - массив с количеством задач в каждом разделе

# In[22]:


import math
class Answer:
    def CountSpecialProblems(self, n, k, arr):
        # введите свой код ниже
        count = 0
        page = 1
        
        for i in arr:
            zadacha = 1
            while zadacha <= i:
                if zadacha == page:
                    count += 1
                if zadacha % k == 0:
                    page += 1
                zadacha += 1
            if i % k != 0:
                page += 1
        return count
    
print(Answer().CountSpecialProblems(n = 2, k = 3, arr = [4, 2]))


# Задача на добавление медианного значения последней строкой

# In[6]:


import pandas as pd

df1 = [
    {'page1': 1, 'page2': 25, 'page3': 3}, 
    {'page1': 4, 'page2': 58, 'page3': 1}, 
    {'page1': 1.5, 'page2': 8, 'page3': 0.5}
    ]

df2 = [
     {'page1': 2, 'page2': 11, 'page3': None}, 
     {'page1': 5, 'page2': 21, 'page3': 5}, 
     {'page1': 0.1, 'page2': 38, 'page3': 15}
     ]

df3 = [
     {'page1': 2, 'page2': 11, 'page3': 40}, 
     {'page1': 5, 'page2': 15, 'page3': None}, 
     {'page1': 4, 'page2': 21, 'page3': 13}
     ]

df1, df2, df3 = [pd.DataFrame(df) for df in [df1, df2, df3]]


# In[7]:


df = pd.concat([df1, df2, df3]).dropna().reset_index().drop('index', axis = 1)


# In[12]:


Mean = []
for i in range(len(df.columns)): 
    Mean.append(df.iloc[:, i].mean())
Mean = pd.DataFrame([dict(zip(df.columns, Mean))]).rename(index = {0: 'Mean'})


# In[21]:


pd.concat([df, Mean])


# Напишите функцию FindMedian, которая будет возвращать одно число - медианное значение.
# 
# Функция FindMedian принимает на вход arr - исходный список с числами.

# In[2]:


import math
class Answer:
    def FindMedian(self, arr):
        arr.sort()
        if len(arr) % 2 == 1:
            res = arr[math.ceil(len(arr) / 2) - 1]
        elif len(arr) % 2 == 0 and len(arr) > 0:
            res = (arr[int(len(arr) / 2 - 1)] + arr[int(len(arr) / 2)]) / 2
        else:
            return None
        return res


# Написать декоратор printing, который будет выводить на экран название функции, к которой он применяется, во время ее вызова.

# In[3]:


class Answer:
    def printing(self, func):
        def wrapper():
            print(func.__name__)
        return wrapper


# Вы играете в компьютерную игру, где нужно перемещаться по облакам. Но не все так просто - облака бывают двух видов:
# 
# обычные облачка
# грозовые тучи
# Перемещаться можно только по облачкам - наступать на грозовые тучи нельзя. Можно делать либо один шаг, либо перепрыгивать через 1.
# 
# Облака представлены в виде последовательного массива чисел. 0 - значит облако, 1 - грозовая туча.
# 
# Важно: Игра устроена таким образом, что вы всегда можете выиграть.
# 
# Задание
# Напишите функцию jumpingOnClouds, которая будет возвращать минимальное количество прыжков, необходимое для окончания игры.
# 
# Функция jumpingOnClouds принимает на вход clouds - занумерованный массив с «облаками».

# In[ ]:


class Answer:
    def jumpingOnClouds(self, clouds):
        jumps = 0
        i = 0
        while i < len(clouds) - 1:
            if clouds[i+2] == 0:
                i += 2
                jumps += 1
            else:
                i += 1
                jumps += 1
        return jumps
    
print(Answer().jumpingOnClouds([0, 1, 0, 0, 1, 0]))


# Напишите функцию fizzbuzztest, которая возвращает массив, который формируется по следующим правилам:
# 
# 1. Обрабатываются числа от 1 до 100
# 2. Если число кратно трем, то в массив заносим слово Fizz
# 3. Если число кратно пяти, то в массив заносим слово Buzz
# 4. Если число кратно и трем, и пяти, то в массив заносим слово FizzBuzz
# 5. Если число не кратно ни одному их этих чисел, то в массив нужно поместить просто само число

# In[15]:


class Answer:
    def fizzbuzztest(self):
        i = 1
        res = []
        while i < 101:
            if i % 3 == 0 and i % 5 != 0:
                res.append('Fizz')
            elif i % 5 == 0 and i % 3 != 0:
                res.append('Buzz')
            elif i % 15 == 0:
                res.append('FizzBuzz')
            else:
                res.append(i)
            i += 1
        return res

print(Answer().fizzbuzztest())


# Дана строка str. Необходимо написать функцию, которая принимает на вход строку и выводит кортеж из двух элементов:
# 
# 1. Самый часто встречающийся символ
# 2. Количество его повторов
# 
# Примечание 1: Если несколько символов встречаются одинаковое количество раз, то вывести любой из кортежей.
# 
# Примечание 2: Пробел и знаки препинания тоже считаются символами.

# In[30]:


class Answer:
    def max_char(self, str1):
        dic = {}
        for i in str1:
            if i in dic:
                dic[i] += 1
            else:
                dic[i] = 1
        for key, val in dic.items():
            if val == max(dic.values()):
                return (key, val)

print(Answer().max_char('aaa bbb cc'))


# # Avito

# Дано:
# Матрица [N×M] и число k. Значения матрицы - целые числа на отрезке [-100; 100], N, M и k- целые числа на отрезке [1; 100].
# 
# На вход программе будет подано:
# На первой строке задается количество строк матрицы N и через пробел количество столбцов матрицы M. На последующих N строках задаются строки матрицы, каждая из которых содержит M целых чисел, разделенных пробелом, затем число k.
# 
# Задaча:
# Необходимо вывести результат перемножения матрицы на число.
# 
# Sample Input:
# 
# 3 2
# 
# 1 2
# 
# 3 4
# 
# 5 6
# 
# 2
# 
# Sample Output:
# 
# 2 4
# 
# 6 8
# 
# 10 12

# In[81]:


a, b = (int(x) for x in input().split())

example_matrix = []      

for i in range(a):
    single_row = list(map(int, input().split()))
    example_matrix.append(single_row)  
k = int(input())

for i in range(a):  
    for j in range(b):  
        print(example_matrix[i][j] * k, end=" ")
    print()


# Написать программу для нахождения объема шара по его радиусу.
# 
# На вход программе подается дробное число - радиус шара. Ответ округлить строго до 2х знаков после запятой.
# 
# Число пи можно считать равным 3.14

# In[12]:


r = round(float(input()),2)

v = 4/3 * 3.14 * r**3
print(round(v, 2))


# Даны 3 точки на оси координат. Найти кратчайшее расстояние между любыми двумя из них.
# 
# Координаты представлены целым числом от 1 до 50. Задаются в 3 строчки формата:
# 
# x1 y1
# x2 y2
# x3 y3
# Найти расстояния между точками, вывести кратчайшее. Ответ округлить строго до 2х знаков после запятой

# In[17]:


x1, y1 = (int(i) for i in input().split())
x2, y2 = (int(j) for j in input().split())
x3, y3 = (int(k) for k in input().split())

def distance(a, b, c, d):
    dis = ((a - c)**2 + (b - d)**2)**(1/2)
    return dis

current_min = 0
if distance(x1, y1, x2, y2) < distance (x1, y1, x3, y3) and distance(x1, y1, x2, y2) < distance (x2, y2, x3, y3):
    current_min = distance(x1, y1, x2, y2)
elif distance(x1, y1, x2, y2) > distance (x1, y1, x3, y3) and distance (x1, y1, x3, y3) < distance (x2, y2, x3, y3):
    current_min = distance (x1, y1, x3, y3)
else:
    current_min = distance (x2, y2, x3, y3)
print(round(current_min, 2))


# Дано целое положительное число в двоичной системе счисления. Написать программу, конвертирующую его в десятичную систему счисления. 

# In[26]:


num_2 = int(input())

x = str(num_2)
num_10 = 0
l = 0
for i in x:
    comp = l * 2 + int(i)
    l = comp
    num_10 = comp
print(num_10)


# Написать программу для проверки корректности IPv6 адреса.
# 
# IPv6 адрес представляет собой 8 сегментов из 4-х значных шестнадцатеричных чисел, разделённых двоеточием. Разрешено пропускать нули спереди числа или сегмент целиком, если число в нём 0000, или пропустить несколько сегментов, если все они нулевые. 
# 
# В ответе если адрес корректный вывести строковое значение 'true', в противным случае вывести 'false'
# 
# Разрешается учитывать только обычную и сокращённую запись. Специальную нотацию для IPv4 можно не учитывать:
# 
# ```обычная 0000:0000:0000:0000:0000:0000:0000:0000
# сокращённая ff06::c3
# специальная для IPv4(можно не учитывать) 0:0:0:0:0:ffff:192.1.56.10```
# 
# В примерах ниже первый невалидный, т.к. присутствуют буквы, не используемые в шестнадцатеричных числах (g,m,o)

# In[4]:


leter_str_16 = 'a b c d e f '
leter_str_16 += '0 1 2 3 4 5 6 7 8 9 '
leter_str_16 += ':'
gs = leter_str_16.split(' ')
ip = str(input())

def test(ip):
    l = 0
    for i in ip:
        for j in leter_str_16:
            if i == j:
                l += 1
    return l

l = test(ip)
if l == len(ip):
    print('true')
else:
    print('false')

